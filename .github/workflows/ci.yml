name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality & Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint
      continue-on-error: false

    - name: Check TypeScript
      run: npx tsc --noEmit

    - name: Run Prettier check
      run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"
      continue-on-error: true

    - name: Security audit
      run: npm audit --audit-level=high
      continue-on-error: true

    - name: Check for outdated dependencies
      run: npm outdated
      continue-on-error: true

  # Job 2: Build & Test
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        NEXT_TELEMETRY_DISABLED: 1

    - name: Check build artifacts
      run: |
        if [ ! -d ".next" ]; then
          echo "Build failed - .next directory not found"
          exit 1
        fi
        echo "Build successful - .next directory exists"

    - name: Test build size
      run: |
        BUILD_SIZE=$(du -sh .next | cut -f1)
        echo "Build size: $BUILD_SIZE"
        # Add size check if needed
        # if [ $(du -s .next | cut -f1) -gt 100000 ]; then
        #   echo "Build size too large"
        #   exit 1
        # fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: matrix.node-version == 18
      with:
        name: build-artifacts
        path: |
          .next/
          public/
        retention-days: 1

  # Job 3: Docker Build & Security Scan
  docker-build:
    name: Docker Build & Security
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: qr-generator:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        # Start container in background
        docker run -d --name qr-test -p 3000:3000 qr-generator:test
        
        # Wait for container to start
        sleep 10
        
        # Check if container is running
        if ! docker ps | grep -q qr-test; then
          echo "Container failed to start"
          docker logs qr-test
          exit 1
        fi
        
        # Test if application responds
        if ! curl -f http://localhost:3000 > /dev/null 2>&1; then
          echo "Application not responding"
          docker logs qr-test
          exit 1
        fi
        
        echo "Docker image test passed"
        
        # Cleanup
        docker stop qr-test
        docker rm qr-test

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'qr-generator:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  # Job 4: Performance & Accessibility Tests
  performance-tests:
    name: Performance & Accessibility
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts

    - name: Start application
      run: |
        npm start &
        sleep 10
      env:
        NODE_ENV: production

    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli

    - name: Run Lighthouse CI
      run: |
        lhci autorun --upload.target=temporary-public-storage || echo "Lighthouse CI completed with warnings"
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
      continue-on-error: true

    - name: Test application endpoints
      run: |
        # Test main page
        curl -f http://localhost:3000 || exit 1
        
        # Test if QR generation works (basic check)
        if ! curl -s http://localhost:3000 | grep -q "QReator"; then
          echo "Main page content not found"
          exit 1
        fi
        
        echo "Application endpoints test passed"

  # Job 5: Deploy Preview (for PRs)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test, docker-build]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for preview
      run: npm run build
      env:
        NEXT_TELEMETRY_DISABLED: 1

    - name: Comment PR with preview info
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'üöÄ **Preview Build Successful!**\n\n‚úÖ All checks passed\n‚úÖ Docker image built successfully\n‚úÖ Performance tests completed\n\nReady for review and merge!'
          })

  # Job 6: Build and Push Docker Image (on main branch)
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test, docker-build, performance-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 7: Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test, docker-build, performance-tests]
    if: always()
    
    steps:
    - name: Notify Success
      if: ${{ needs.code-quality.result == 'success' && needs.build-and-test.result == 'success' && needs.docker-build.result == 'success' }}
      run: |
        echo "üéâ All checks passed successfully!"
        echo "‚úÖ Code quality checks passed"
        echo "‚úÖ Build and tests passed"
        echo "‚úÖ Docker build successful"
        echo "‚úÖ Performance tests completed"

    - name: Notify Failure
      if: ${{ needs.code-quality.result == 'failure' || needs.build-and-test.result == 'failure' || needs.docker-build.result == 'failure' }}
      run: |
        echo "‚ùå Some checks failed!"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Build & Test: ${{ needs.build-and-test.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        echo "Performance: ${{ needs.performance-tests.result }}"
        exit 1