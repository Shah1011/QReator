name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Create Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      packages: write
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## Changes since $PREVIOUS_TAG" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Get commits since last tag
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "- Initial release of QR Generator application" >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "## Features" >> CHANGELOG.md
        echo "- üéØ Dynamic QR code generation with custom styling" >> CHANGELOG.md
        echo "- üé® Multiple color schemes and design options" >> CHANGELOG.md
        echo "- üì± Responsive design for mobile and desktop" >> CHANGELOG.md
        echo "- üñºÔ∏è Logo upload and embedding functionality" >> CHANGELOG.md
        echo "- üìã Copy to clipboard feature" >> CHANGELOG.md
        echo "- üíæ Download QR codes as PNG files" >> CHANGELOG.md
        echo "- ‚ö° Loading animations for better UX" >> CHANGELOG.md
        echo "- üê≥ Docker containerization support" >> CHANGELOG.md

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false

  # Job 2: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests and build
      run: |
        npm run lint
        npm run build
      env:
        NEXT_TELEMETRY_DISABLED: 1

    - name: Create build archive
      run: |
        tar -czf qr-generator-${{ needs.create-release.outputs.version }}.tar.gz \
          .next/ \
          public/ \
          package.json \
          package-lock.json \
          next.config.ts \
          README.md

    - name: Upload build artifact to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./qr-generator-${{ needs.create-release.outputs.version }}.tar.gz
        asset_name: qr-generator-${{ needs.create-release.outputs.version }}.tar.gz
        asset_content_type: application/gzip

  # Job 3: Build and Push Docker Images
  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    needs: [create-release, build-and-test]
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}},value=${{ needs.create-release.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.create-release.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.create-release.outputs.version }}
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Update Docker Hub description
      uses: peter-evans/dockerhub-description@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        repository: ${{ github.repository }}
        readme-filepath: ./docker-README.md
      continue-on-error: true

  # Job 4: Deploy to Production (if you have deployment setup)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release, build-and-test, docker-release]
    environment: production
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy notification
      run: |
        echo "üöÄ Deploying QR Generator ${{ needs.create-release.outputs.version }} to production"
        echo "Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.create-release.outputs.version }}"
        
        # Add your deployment commands here
        # For example:
        # - Deploy to Kubernetes
        # - Update Docker Compose on server
        # - Deploy to cloud provider
        
        echo "‚úÖ Deployment completed successfully"

    - name: Post-deployment tests
      run: |
        echo "Running post-deployment tests..."
        
        # Add health checks here
        # For example:
        # curl -f https://your-domain.com/health
        
        echo "‚úÖ Post-deployment tests passed"

  # Job 5: Notify Success
  notify-success:
    name: Notify Release Success
    runs-on: ubuntu-latest
    needs: [create-release, build-and-test, docker-release, deploy-production]
    if: always() && needs.create-release.result == 'success'
    
    steps:
    - name: Success notification
      run: |
        echo "üéâ Release ${{ needs.create-release.outputs.version }} completed successfully!"
        echo ""
        echo "üì¶ Build artifacts created"
        echo "üê≥ Docker images published"
        echo "üöÄ Production deployment completed"
        echo ""
        echo "Release URL: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }}"