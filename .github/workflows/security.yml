name: Security & Dependency Updates

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  # Job 1: Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate --json > audit-results.json || true
        
        # Check if there are any vulnerabilities
        if [ -s audit-results.json ]; then
          echo "Security vulnerabilities found:"
          cat audit-results.json
          
          # Create issue if vulnerabilities found
          VULN_COUNT=$(cat audit-results.json | jq '.metadata.vulnerabilities.total // 0')
          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "Found $VULN_COUNT vulnerabilities"
            echo "VULNERABILITIES_FOUND=true" >> $GITHUB_ENV
          fi
        fi

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true

  # Job 2: Dependency Updates
  dependency-update:
    name: Check Dependency Updates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Check for outdated dependencies
      run: |
        npm outdated --json > outdated.json || true
        
        if [ -s outdated.json ]; then
          echo "Outdated dependencies found:"
          cat outdated.json
          
          # Create a summary
          echo "## 📦 Dependency Update Report" > dependency-report.md
          echo "" >> dependency-report.md
          echo "The following dependencies have updates available:" >> dependency-report.md
          echo "" >> dependency-report.md
          
          # Parse outdated.json and create readable format
          node -e "
            const outdated = JSON.parse(require('fs').readFileSync('outdated.json', 'utf8'));
            Object.entries(outdated).forEach(([pkg, info]) => {
              console.log(\`- **\${pkg}**: \${info.current} → \${info.latest}\`);
            });
          " >> dependency-report.md || echo "No outdated dependencies" >> dependency-report.md
        else
          echo "All dependencies are up to date!"
        fi

    - name: Upload dependency report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-report
        path: dependency-report.md
      if: always()

  # Job 3: License Compliance
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install license checker
      run: npm install -g license-checker

    - name: Install dependencies
      run: npm ci

    - name: Check licenses
      run: |
        license-checker --json > licenses.json
        
        # Check for problematic licenses
        PROBLEMATIC_LICENSES=("GPL-2.0" "GPL-3.0" "AGPL-1.0" "AGPL-3.0")
        
        echo "## 📄 License Report" > license-report.md
        echo "" >> license-report.md
        
        for license in "${PROBLEMATIC_LICENSES[@]}"; do
          if grep -q "$license" licenses.json; then
            echo "⚠️ Found potentially problematic license: $license" >> license-report.md
            echo "LICENSE_ISSUES=true" >> $GITHUB_ENV
          fi
        done
        
        if [ "$LICENSE_ISSUES" != "true" ]; then
          echo "✅ No problematic licenses found" >> license-report.md
        fi
        
        echo "" >> license-report.md
        echo "### All Licenses:" >> license-report.md
        license-checker --summary >> license-report.md

    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: license-report.md

  # Job 4: Create Issues for Problems
  create-issues:
    name: Create Issues for Problems
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-update, license-check]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create security issue
      if: needs.security-scan.outputs.VULNERABILITIES_FOUND == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const title = '🔒 Security Vulnerabilities Detected';
          const body = `
          ## Security Alert
          
          Our automated security scan has detected vulnerabilities in the project dependencies.
          
          ### Action Required
          - Review the security scan results
          - Update vulnerable dependencies
          - Run \`npm audit fix\` to automatically fix issues
          - For manual fixes, check the detailed audit report
          
          ### Next Steps
          1. Run \`npm audit\` locally to see detailed information
          2. Update dependencies using \`npm update\`
          3. For breaking changes, test thoroughly before merging
          
          This issue was automatically created by the security workflow.
          `;
          
          // Check if issue already exists
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'security'
          });
          
          const existingIssue = issues.data.find(issue => issue.title === title);
          
          if (!existingIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'automated']
            });
          }

    - name: Create dependency update issue
      uses: actions/github-script@v7
      with:
        script: |
          const title = '📦 Dependency Updates Available';
          const body = `
          ## Dependency Update Report
          
          Some dependencies have newer versions available.
          
          ### Action Required
          - Review the dependency report in the workflow artifacts
          - Update dependencies that don't introduce breaking changes
          - Test thoroughly after updates
          
          ### Commands to Update
          \`\`\`bash
          # Check outdated packages
          npm outdated
          
          # Update all dependencies (be careful with major version changes)
          npm update
          
          # Or update specific packages
          npm install package-name@latest
          \`\`\`
          
          This issue was automatically created by the security workflow.
          `;
          
          // Check if issue already exists
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'dependencies'
          });
          
          const existingIssue = issues.data.find(issue => issue.title === title);
          
          if (!existingIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['dependencies', 'automated']
            });
          }